services:
  app:
    container_name: app
    build:
      context: .
    restart: always
    volumes:
      - static:/vol/web
    expose:
      - "9090"
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEV=false

    labels:
      - "traefik.enable=true"
      # Traefik HTTP router rule: match domain
      - "traefik.http.routers.app.rule=Host(`${APP_DOMAIN}`)"
      # Define the Traefik service and route to port 9090
      - "traefik.http.services.app.loadbalancer.server.port=9090"
      # Optional: redirect HTTP to HTTPS
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver" # Using a cert resolver for HTTPS
      # Letâ€™s Encrypt configuration
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.middlewares=redirect-to-https@docker"
      # Let's Encrypt settings
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

    networks:
      - net
      - backend

    depends_on:
      - db

  db:
    image: postgres:16.0-alpine3.18
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - PORT=${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  postgres-data:
  static:

networks:
  net:
    external: true
  backend:
