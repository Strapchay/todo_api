---
name: Deploy

on:
  push:
    branches:
      - master

jobs:
  tests:
    name: Execute Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Test
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"

  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Checkout and Copy Repo
        env:
          dest: "${{ secrets.USERNAME }}@${{ secrets.HOST_DNS }}:/home/${{ secrets.USERNAME }}"
        run: |
          mkdir ../build
          apt install rsync -y
          rsync -av --progress --exclude='.git' --exclude='.github' --exclude='.vscode' ./ ../build
          tar -cvf deploy.tar ../build/
          echo "${{ secrets.EC2_SSH_KEY}}" > deploy_key
          chmod 600 ./deploy_key
          rsync -chrlvzi --delete \
            -e 'ssh -i ./deploy_key -p 22 -o StrictHostKeyChecking=no' \
            --include "deploy.tar" \
            --exclude '*'\
            ./ ${{env.dest}}

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Execute Build Commands For Deployed App
        uses: appleboy/ssh-action@master
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER}}
          DB_PASS: ${{ secrets.DB_PASS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS: ${{ secrets.HOST_DNS }}
          DB_PORT: ${{ secrets.DB_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
          EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_NAME,DB_USER,DB_PASS,SECRET_KEY,ALLOWED_HOSTS,DB_PORT,EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,EMAIL_HOST,EMAIL_PORT,EMAIL_USE_SSL,EMAIL_USE_TLS,APP_DOMAIN
          script_stop: true
          script: |
            tar -xvf ~/deploy.tar
            rm ~/deploy.tar
            cd ~/build
            echo DB_NAME=$DB_NAME >> .env
            echo DB_USER=$DB_USER >> .env
            echo DB_PASS=$DB_PASS >> .env
            echo DB_PORT=$DB_PORT >> .env
            echo SECRET_KEY=$SECRET_KEY >> .env
            echo ALLOWED_HOSTS=$ALLOWED_HOSTS >> .env
            echo EMAIL_HOST_USER=$EMAIL_HOST_USER >> .env
            echo EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD >> .env
            echo EMAIL_HOST=$EMAIL_HOST >> .env
            echo EMAIL_PORT=$EMAIL_PORT >> .env
            echo EMAIL_USE_SSL=$EMAIL_USE_SSL >> .env
            echo EMAIL_USE_TLS=$EMAIL_USE_TLS >> .env
            echo APP_DOMAIN=$APP_DOMAIN >> .env
            docker compose -f ./docker-compose-build.yml build --no-cache
            docker compose -f ./docker-compose-build.yml up -d
